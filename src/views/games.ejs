<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>stars</title>
    <script src="https://fb.me/react-0.14.7.js"></script>
    <script src="https://fb.me/react-dom-0.14.7.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"></script>
  </head>
  <body>
    <div id="gamelist"></div>
    <script type="text/babel">
      var userId = '<%= user._id.toString() %>';
      var username = '<%= user.username %>';

      function ajaxReq(method, url, data, cb) {
        let xhttp = new XMLHttpRequest();

        xhttp.onreadystatechange = function() {
          if (xhttp.readyState < 4) {
            return;
          }
          if (xhttp.status != 200) {
            console.log('Error making AJAX call: %s', xhttp.status);
            return;
          }
          cb(JSON.parse(xhttp.responseText));
        };

        xhttp.open(method, url, true);
        xhttp.setRequestHeader('Content-Type', 'application/json');
        if (data !== null) {
          xhttp.send(JSON.stringify(data));
        } else {
          xhttp.send();
        }
      }

      var GameList = React.createClass({
        getInitialState: function() {
          return {
            games: [],
            users: [],
          };
        },
        refresh: function(e) {
          let this_ = this;

          ajaxReq('GET', 'games/info', null, function(res) {
            this_.setState(res);
          });
        },
        newGame: function(e) {
          let this_ = this;

          ajaxReq('POST', 'games/new', {
            name: this.refs.new_game_name.value,
            against: this.refs.new_game_vs.value,
          }, function(res) {
            this_.setState(res);
          });
        },
        render: function() {
          let getOtherPlayer = function(that, game) {
            for (let player of game.players) {
              if (player.userId != userId) {
                for (let user of that.state.users) {
                  if (user._id == player.userId) {
                    return user;
                  }
                }
              }
            }
            return null;
          }

          let games = [];
          for (let game of this.state.games) {
            var otherUser = getOtherPlayer(this, game);

            let winner = 'undecided';
            if (game.state.winner !== undefined) {
              winner = game.state.winner == userId ?
                username : otherUser.username;
            }

            let joinLink = '';
            if (game.state.winner === undefined) {
              joinLink = (<a href={"game"}>join</a>);
            }

            games.push(
              <tr key={game.id}>
                <td>{game.name}</td>
                <td>{otherUser.username}</td>
                <td>{winner}</td>
                <td>{joinLink}</td>
              </tr>
            );
          }

          let against = [];
          for (let user of this.state.users) {
            let alreadyPlaying = false;
            for (let game of this.state.games) {
              let otherUser = getOtherPlayer(this, game);
              if (otherUser._id == user._id) {
                if (game.state.winner === undefined) {
                  alreadyPlaying = true;
                  break;
                }
              }
            }

            if (alreadyPlaying) {
              continue;
            }

            against.push(
              <option key={user._id} value={user._id}>{user.username}</option>
            );
          }

          let gameTable = '';
          if (games.length > 0) {
            gameTable = (
              <table>
                <thead>
                  <tr>
                    <th>game name</th>
                    <th>playing against</th>
                    <th>winner</th>
                    <th>join</th>
                  </tr>
                </thead>
                <tbody>
                  {games}
                </tbody>
              </table>
            );
          }

          return (
            <div>
              {gameTable}
              <label htmlFor="new_game_name">new game name</label>
              <input id="new_game_name" ref="new_game_name" />
              <label htmlFor="new_game_vs">play against</label>
              <select id="new_game_vs" ref="new_game_vs">
                {against}
              </select>
              <input type="button" value="new game" onClick={this.newGame} />
            </div>
          );
        },
      });

      var list = ReactDOM.render(<GameList />,
        document.getElementById('gamelist'));

      list.refresh();
    </script>
  </body>
</html>
